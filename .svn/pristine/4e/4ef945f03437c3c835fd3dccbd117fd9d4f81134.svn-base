package com.oo115.myapplication.Workout_feature;

import android.app.Activity;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.like.LikeButton;
import com.like.OnLikeListener;
import com.oo115.myapplication.BodyPart;
import com.oo115.myapplication.PrefConFig;
import com.oo115.myapplication.R;
import com.squareup.picasso.Picasso;

import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Objects;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public class Exercises_LVAdapter extends ArrayAdapter<String> implements View.OnClickListener, Filterable {


    //    private String[] exercise;
    private ArrayList<Integer> image;
    private Activity context;
    ArrayList<String> exercise = new ArrayList<String>();
    ArrayList<String> exerciseFilter;
    protected Filter filter;
    protected ArrayList<String> items;
    protected ArrayList<String> res;
    ArrayList<String> image_url = new ArrayList<String>();
    public static PrefConFig prefConFig;

    public Exercises_LVAdapter(Activity context, ArrayList<String> exercise, ArrayList<Integer> image, ArrayList<String> image_url) {
        super(context, R.layout.exercises_layout, exercise);

        this.context = context;
        this.exercise = exercise;
        this.image = image;
        exerciseFilter = (ArrayList<String>) exercise.clone();
        this.image_url = image_url;
        filter = new PhysFilter();
        res = new ArrayList<String>();
    }

    @Override
    public void onClick(View v) {
        int position = (Integer) v.getTag();
        Object object = getItem(position);
        BodyPart dataModel = (BodyPart) object;
        Toast.makeText(getContext(), "This is my Toast message!",
                Toast.LENGTH_LONG).show();

    }


    public static Drawable LoadImageFromWebOperations(String url) {
        try {
            InputStream is = (InputStream) new URL(url).getContent();
            Drawable d = Drawable.createFromStream(is, "src name");
            return d;
        } catch (Exception e) {
            return null;
        }
    }

    @NonNull
    @Override
    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
        prefConFig = new PrefConFig(Objects.requireNonNull(getContext()));
        View view = convertView;
        ViewHolder viewHolder;
        if (view == null) {
            //build in class to convert xml file to corressponding java object
            LayoutInflater layoutInflater = context.getLayoutInflater();
            view = layoutInflater.inflate(R.layout.exercises_layout, null, true);
            viewHolder = new ViewHolder(view);
            //view class method which stores view
            view.setTag(viewHolder);
        } else {
            //this gets the stored method in set tag
            viewHolder = (ViewHolder) view.getTag();
        }


//        try {
//            Bitmap bitmap = BitmapFactory.decodeStream((InputStream)new URL(image_url.get(position)).getContent());
//            viewHolder.image.setImageBitmap(bitmap);
//        } catch (MalformedURLException e) {
//            e.printStackTrace();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
        //setting the reference for the image and text view
        viewHolder.exercise_array.setText(exercise.get(position));
//     viewHolder.image.setImageResource(image.get(0));

        if (!image_url.get(position).isEmpty()) {
            Picasso.get().
                    load(image_url.get(position))
                    .placeholder(R.drawable.back)
                    .into(viewHolder.image);

        } else {
            Picasso.get().
                    load("http://osatoo1.sgedu.site//images//linked%20inPic.jpg")
                    .placeholder(R.drawable.back)
                    .into(viewHolder.image);
        }

//        viewHolder.likebtn.setFocusable(false);
//        viewHolder.addToPlanbtn.setFocusable(false);

        viewHolder.likebtn.setOnLikeListener(new OnLikeListener() {
            @Override
            public void liked(LikeButton likeButton) {
                prefConFig.distplayToast(Integer.toString(image_url.size()));
            }

            @Override
            public void unLiked(LikeButton likeButton) {

            }
        });

//        viewHolder.addToPlanbtn.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                Toast.makeText(getContext(), "Add to plan",
//                        Toast.LENGTH_LONG).show();
//            }
//        });


        return view;


    }


    class ViewHolder {
        TextView exercise_array;
        ImageView image;
        ListView listView;
        LikeButton likebtn;
//                addToPlanbtn;


        ViewHolder(View view) {
            exercise_array = view.findViewById(R.id.list_exercise);
            image = view.findViewById(R.id.exercise_picture);
            likebtn = view.findViewById(R.id.favouriteBtn);
//            +addToPlanbtn= view.findViewById(R.id.addToPlanBtn);





        }
    }

    @NonNull
    @Override
    public Filter getFilter() {

        return filter;
    }

    private class PhysFilter extends Filter {

        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            FilterResults f = new FilterResults();

            ArrayList<String> res = new ArrayList<String>();

            if (constraint == null || constraint.length() == 0) {

                f.values = exerciseFilter;
                //.toArray();
                f.count = exerciseFilter.size();
            } else {

                for (int x = 0; x < exercise.size(); x++) {

                    if (!exerciseFilter.contains(exercise.get(x))) {
                        exerciseFilter.add(exercise.get(x));
                    }

                    if (exercise.get(x).toUpperCase().contains(constraint.toString().toUpperCase())) {
                        res.add(exercise.get(x));
                    }
                }
                f.values = res;//.toArray();
                f.count = res.size();
            }
            return f;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {

            if (results.count > 0) {
                Toast.makeText(getContext(), "if",
                        Toast.LENGTH_LONG).show();

                exercise.clear();
                exercise.addAll((ArrayList<String>) results.values);
                notifyDataSetChanged();
            } else {
                Toast.makeText(getContext(), "else",
                        Toast.LENGTH_LONG).show();
                notifyDataSetChanged();
            }
        }
    }


}

