package com.oo115.myapplication;


import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.style.ForegroundColorSpan;
import android.util.Patterns;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.oo115.myapplication.retrofitAPI.ApiClient;
import com.oo115.myapplication.retrofitAPI.ApiInterface;
import com.oo115.myapplication.retrofitAPI.RegistrationResponse;

import java.util.Objects;

import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import cn.pedant.SweetAlert.SweetAlertDialog;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;


/**
 * A simple {@link Fragment} subclass.
 */
public class RegisterFragment extends Fragment  {
//Using the items defined in the XML and defining them as variables
   private EditText userEmailIdET, passwordET, fNameEt, lName, confirmPassword;
    private Button signUpButton;
    TextView textViewSignInLink;
    private Context context;
    //supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more.
    public static PrefConFig prefConFig;
    public static ApiInterface apiInterface;

    public RegisterFragment() {
        // Required empty public constructor
    }
//
//    public SpannableStringBuilder highlight_text(){
//        SpannableStringBuilder builderSignUp = new SpannableStringBuilder();
//        String fnameHint = "Not registered?";
//        String asterisk = "Sign Up here";
//        SpannableString blueSpannable = new SpannableString(asterisk);
//        blueSpannable.setSpan(new ForegroundColorSpan(Color.BLUE), 0, asterisk.length(), 0);
//        builderSignUp.append(fnameHint);
//        builderSignUp.append(blueSpannable);
//    }


    //this method buildes a string with a red asterisk and a hint
    public SpannableStringBuilder hint_asterisk(String hint) {

        SpannableStringBuilder builderFname = new SpannableStringBuilder();
        String fnameHint = hint;
        String asterisk = "*";
        SpannableString redSpannable = new SpannableString(asterisk);
        redSpannable.setSpan(new ForegroundColorSpan(Color.RED), 0, asterisk.length(), 0);
        builderFname.append(fnameHint);
        builderFname.append(redSpannable);

        return builderFname;

    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        context=container.getContext();
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_register, container, false);
//        //linking the variables defined above to the widgets in the XML
        fNameEt = view.findViewById(R.id.firstName);
        lName= view.findViewById(R.id.lastName);
        userEmailIdET = view.findViewById(R.id.emailInputFromUser);
        passwordET = view.findViewById(R.id.passwordInputFromUser);
        confirmPassword = view.findViewById(R.id.confirmPassword);
        signUpButton = view.findViewById(R.id.signUp);
        textViewSignInLink = view.findViewById(R.id.signInLink);
        prefConFig = new PrefConFig(Objects.requireNonNull(getActivity()));
        apiInterface = ApiClient.getApiClient().create(ApiInterface.class);
        textViewSignInLink.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Fragment fragment = new LoginFragment();
                FragmentManager fragmentManager = Objects.requireNonNull(getActivity()).getSupportFragmentManager();
                FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                fragmentTransaction.replace(R.id.fragment_containerHome, fragment);
                fragmentTransaction.addToBackStack(null);
                fragmentTransaction.commit();
            }
        });


        //String builder for edit text first name hint
        fNameEt.setHint(hint_asterisk("First Name"));
        lName.setHint(hint_asterisk("Last Name"));


        userEmailIdET.setHint(hint_asterisk("Email"));

        passwordET.setHint(hint_asterisk("Password"));

        confirmPassword.setHint(hint_asterisk("Confirm Password"));

        signUpButton.setOnClickListener(new View.OnClickListener() {


            @Override
            public void onClick(View v) {
                onReg();

            }
        });


        return view;
    }

    public void onReg(){
        String str_firstname= fNameEt.getText().toString();
        String str_surname= lName.getText().toString();
        String str_email= userEmailIdET.getText().toString();
        String str_password= passwordET.getText().toString();
        String str_confirmPassword = confirmPassword.getText().toString();


        if ((str_email.isEmpty()) && (str_password.isEmpty()) && (str_firstname.isEmpty()) && (str_surname.isEmpty())) {
            //toast is a default class used for outputting messages
            prefConFig.distplayToast("Empty Fields");
            userEmailIdET.setError("Please enter your email");
            userEmailIdET.requestFocus();
            passwordET.setError("Please enter your password");
            passwordET.requestFocus();
            fNameEt.setError("Please enter first name");
            fNameEt.requestFocus();
            lName.setError("Please enter your last name");
            lName.requestFocus();
            confirmPassword.setError("Please enter your password");
            confirmPassword.requestFocus();
        }
        //if statement checks if the email field is empty
        else if (str_email.isEmpty()) {
            userEmailIdET.setError("Please enter your email");
            userEmailIdET.requestFocus();
        } else if (str_firstname.isEmpty()) {
            fNameEt.setError("Please enter your first name");
            fNameEt.requestFocus();
        } else if (str_surname.isEmpty()) {
            lName.setError("Please enter your last name");
            lName.requestFocus();
        }
        //checks if the passwordET feild is empty
        else if (str_password.isEmpty()) {
            passwordET.setError("Please enter your passwordET");
            passwordET.requestFocus();
        } else if (!Patterns.EMAIL_ADDRESS.matcher(str_email).matches()) {
            userEmailIdET.setError("Please enter a valid email id");
            userEmailIdET.requestFocus();
        } else if (passwordET.length() < 6) {
            passwordET.setError("Password must be longer than 6 characters");
            passwordET.requestFocus();
        } else if (!str_password.equals(str_confirmPassword)) {
            confirmPassword.setError("Password does not match");
            confirmPassword.requestFocus();
        } else {
            Call<RegistrationResponse> call = apiInterface.performRegistration(str_firstname, str_surname, str_email, str_password);


            call.enqueue(new Callback<RegistrationResponse>() {
                @Override
                public void onResponse(Call<RegistrationResponse> call, Response<RegistrationResponse> response) {
                    if (response.body().getResponse().equals("ok")) {
                        new SweetAlertDialog(getActivity(), SweetAlertDialog.SUCCESS_TYPE)
                                .setTitleText(getString(R.string.success_))

                                .setContentText(getString(R.string.registration_success))
                                .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {
                                    @Override
                                    public void onClick(SweetAlertDialog sweetAlertDialog) {
                                        Intent intent = new Intent(getActivity(), MainActivity.class);
                                        startActivity(intent);
                                    }
                                })
                                .show();

                        prefConFig.writeUser_Id(response.body().getUser_details().get(0).getUser_id());
                        prefConFig.writeName(str_firstname);
                        prefConFig.writeEmail(str_email);
                        prefConFig.writeLoginStatus(true);



                    } else if (response.body().getResponse().equals("exists")) {
                        new SweetAlertDialog(getActivity(), SweetAlertDialog.ERROR_TYPE)
                                .setTitleText(getString(R.string.str_error))
                                .setContentText(getString(R.string.registration_exists))
                                .show();
                    } else if (response.body().getResponse().equals("error")) {
                        new SweetAlertDialog(getActivity(), SweetAlertDialog.ERROR_TYPE)
                                .setTitleText(getString(R.string.str_error))
                                .setContentText(getString(R.string.default_msg))
                                .show();
                    } else {
                        RegisterAndLoginActivity.prefConFig.distplayToast(response.body().getResponse());
                    }

                }

                @Override
                public void onFailure(Call<RegistrationResponse> call, Throwable t) {


                }
            });

            fNameEt.setText("");
            lName.setText("");
            userEmailIdET.setText("");
            passwordET.setText("");
            confirmPassword.setText("");


        }








    }



}
