package com.oo115.myapplication.bodyMeasures;


import android.app.DatePickerDialog;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.oo115.myapplication.BodyPart;
import com.oo115.myapplication.PrefConFig;
import com.oo115.myapplication.R;
import com.oo115.myapplication.retrofitAPI.ApiClient;
import com.oo115.myapplication.retrofitAPI.ApiInterface;
import com.oo115.myapplication.retrofitAPI.BodyMeasuresResponse;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Objects;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.fragment.app.Fragment;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 * A simple {@link Fragment} subclass.
 */
public class BodyPartMeasurements extends Fragment {
    private Toolbar bodyToolbar;
    private TextView mDisplayDate;
    private DatePickerDialog.OnDateSetListener mDateSetListener;
    private Button addMeasure;
    private int measurement;
    SimpleDateFormat dateFormatter;
    private Date java_dateOfMeasure;
    private EditText measurementText;
    int bodyPart;
    private ListView listView;
    java.sql.Date sql_date;
    public static ApiInterface apiInterface;
    public static PrefConFig prefConFig;
    int id;
    String[] measurements_date = new String[]{"-", "-", "-", "-", "-"};
    String[] measurements_size = new String[]{"-", "-", "-", "-", "-"};
    View view;
    //arrays for date and measurement size

    public BodyPartMeasurements() {
        // Required empty public constructor
    }

    /**
     * Create a new instance of DetailsFragment, initialized to
     * show the text at 'index'.
     */
    public static BodyPartMeasurements newInstance(int bodyPartID, boolean showInput) {
        BodyPartMeasurements f = new BodyPartMeasurements();

        // Supply index input as an argument.
        Bundle args = new Bundle();
        args.putInt("bodyPartID", bodyPartID);
        args.putBoolean("showInput", showInput);
        f.setArguments(args);

        return f;
    }

    /**
     * Performs API call to get the history of measurement for each bodypart.
     * Checks if any body part has ever been entered by that user
     */

    public void apiCall(int id, int bodyPart) {


        Call<BodyMeasuresResponse> callLeftArm = apiInterface.lastMeasureSearch(id, bodyPart);


        callLeftArm.enqueue(new Callback<BodyMeasuresResponse>() {
            @Override
            public void onResponse(Call<BodyMeasuresResponse> call, Response<BodyMeasuresResponse> response) {
                prefConFig.distplayToast(response.body().getResponse());

                // this if statement will check the response from the server to see if there is a measurement for that user in the database.
                if (response.body().getResponse().equals("Measurement Found")) {

                    //initialises an int for the size of the list sent back by the server
                    int listSize = response.body().getMeasurementArray().size();

                    //this will check if the size of the list sent back by the server is more than or equal to 5
                    //the nested for loops will the get the date and the measurements and store them in an array
                    if (listSize >= 5) {


                        for (int i = 0; i < measurements_date.length; i++) {

                            measurements_date[i] = response.body().getMeasurementArray().get(i).getDate();


                        }
//
//
                        for (int i = 0; i < measurements_size.length; i++) {

                            measurements_size[i] = response.body().getMeasurementArray().get(i).getMeasurement();

                        }

//                        prefConFig.distplayToast(Integer.toString(response.body().getMeasurementArray().size()));

                    } else {
                        //if the list size is not up to 5, then we assign a new size to the array
                        //we then use a for  loop to get the size and the date of the measurement

//                        measurements_size = new String[listSize];
//


                        for (int i = 0; i < listSize; i++) {

                            measurements_date[i] = response.body().getMeasurementArray().get(i).getDate();


                        }
//
//
                        for (int i = 0; i < listSize; i++) {

                            measurements_size[i] = response.body().getMeasurementArray().get(i).getMeasurement();

                        }
                    }
                }

                //ist view for history of measurements
                listView = view.findViewById(R.id.listView);

                //giving the list view an adaptor of class bodyPartHistoryAdaptor
                BodyPartHistoryAdaptor bodyPartHistoryAdaptor = new BodyPartHistoryAdaptor(getActivity(), measurements_size, measurements_date);
                listView.setAdapter(bodyPartHistoryAdaptor);
            }

            @Override
            public void onFailure(Call<BodyMeasuresResponse> call, Throwable t) {

            }
        });
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        view = inflater.inflate(R.layout.fragment_bodypart_details, container, false);
        apiInterface = ApiClient.getApiClient().create(ApiInterface.class);
        prefConFig = new PrefConFig(Objects.requireNonNull(getContext()));

        dateFormatter = new SimpleDateFormat("dd/MM/yyyy");


        int extras = getArguments().getInt("bodyPartID");
        Toast.makeText(getActivity(), String.valueOf(extras), Toast.LENGTH_SHORT).show();


        //setting up the tool bar to have a back arrow on create and setting the title of the fragment
        bodyToolbar = view.findViewById(R.id.bodyTrackingDetailsToolbar_LeftArm);


        //removing the actionbar so that tool bar can show
        ((AppCompatActivity) getActivity()).getSupportActionBar().hide();
        bodyToolbar.setNavigationIcon(R.drawable.ic_back);
        bodyToolbar.setNavigationOnClickListener(v -> getActivity().onBackPressed());


        //a switch statements which collects the extra sent over (the body part position on the list) and determines what to display
        switch (extras) {
            case 0:
                bodyToolbar.setTitle(R.string.left_arm);
                bodyPart = BodyPart.LEFTARM;

                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);

                break;
            case 1:
                bodyToolbar.setTitle(R.string.right_arm);
                bodyPart = BodyPart.RIGHTARM;
                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);
                break;
            case 2:
                bodyToolbar.setTitle(R.string.pectoraux);
                bodyPart = BodyPart.PECTORAUX;
                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);
                break;
            case 3:
                bodyToolbar.setTitle(R.string.waist);
                bodyPart = BodyPart.WAIST;
                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);
                break;
            case 4:
                bodyToolbar.setTitle(R.string.behind);
                bodyPart = BodyPart.BEHIND;
                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);
                break;
            case 5:
                bodyToolbar.setTitle(R.string.left_thigh);
                bodyPart = BodyPart.LEFTTHIGH;
                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);
                break;
            case 6:
                bodyToolbar.setTitle(R.string.right_thigh);
                bodyPart = BodyPart.RIGHTTHIGH;
                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);
                break;
            case 7:
                bodyToolbar.setTitle(R.string.left_calves);
                bodyPart = BodyPart.LEFTCALVES;
                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);
                break;
            case 8:
                bodyToolbar.setTitle(R.string.right_calves);
                bodyPart = BodyPart.RIGHTCALVES;
                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);
                break;
        }


        //setting up select date
        mDisplayDate = view.findViewById(R.id.measuredate);
        mDisplayDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                mDateSetListener = new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        //we need to add 1 to the month because january is 0 and december is 11
                        month = month + 1;
                        String date = month + "/" + dayOfMonth + "/" + year;
                        mDisplayDate.setText(date);
                        try {
                            java_dateOfMeasure = dateFormatter.parse(date);
                            sql_date = new java.sql.Date(java_dateOfMeasure.getTime());
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }


                    }
                };

                //create calender object so that when text view is clicked it immediately goes to the current date
                Calendar calendar = Calendar.getInstance();
                //getting the current year
                int year = calendar.get(Calendar.YEAR);
                //getting the current month
                int month = calendar.get(Calendar.MONTH);
                //getting the current day
                //day of month because they are different  number of days in each month
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                DatePickerDialog dialog = new DatePickerDialog(
                        Objects.requireNonNull(getContext()),
                        android.R.style.Theme_Holo_Light_Dialog_MinWidth,
                        mDateSetListener,
                        year, month, day

                );
                //making background transparent
                Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                dialog.show();


            }
        });

        //add measure button
        addMeasure = view.findViewById(R.id.buttonAddMeasure);
        measurementText = view.findViewById(R.id.bodyPartMeasurement);
        addMeasure.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {


                if (!measurementText.getText().toString().isEmpty()) {
                    measurement = Integer.parseInt(measurementText.getText().toString());
                    id = Integer.parseInt(prefConFig.readId());


                    Call<BodyMeasuresResponse> callAddMeasurement = apiInterface.addMeasurement(id, bodyPart, measurement, sql_date);

                    callAddMeasurement.enqueue(new Callback<BodyMeasuresResponse>() {
                        @Override
                        public void onResponse(Call<BodyMeasuresResponse> call, Response<BodyMeasuresResponse> response) {
                            if (response.body().getResponse().equals("measurement added")) {
                                prefConFig.distplayToast("Measurement added");
                                apiCall(Integer.parseInt(prefConFig.readId()), bodyPart);


                            } else {


                                prefConFig.distplayToast("Error adding measurement");
                            }
                        }

                        @Override
                        public void onFailure(Call<BodyMeasuresResponse> call, Throwable t) {
                            prefConFig.distplayToast("something went wrong!");
                        }
                    });


                } else {
                    prefConFig.distplayToast("Please add measurement");

                }

            }
        });

        return view;
    }

}
