package com.oo115.myapplication.Workout_feature;


import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.TextView;

import com.oo115.myapplication.BodyPart;
import com.oo115.myapplication.PrefConFig;
import com.oo115.myapplication.R;
import com.oo115.myapplication.retrofitAPI.ApiClient;
import com.oo115.myapplication.retrofitAPI.ApiInterface;
import com.oo115.myapplication.retrofitAPI.Exercises_response;

import java.util.ArrayList;
import java.util.Objects;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 * A simple {@link Fragment} subclass.
 */
public class Exercises_for_muscle_groupsFragment extends Fragment {
    private Toolbar toolbar;
    public static PrefConFig prefConFig;
    public static ApiInterface apiInterface;
    ArrayList<String> exercises_array = new ArrayList<String>();
    ArrayList<Integer> exercise_Image = new ArrayList<Integer>();
    ArrayList<String> favourites = new ArrayList<String>();
    private ListView listView;
    private SearchView searchView;
    ArrayList<String> image_url = new ArrayList<String>();
//    ArrayList<Bitmap> bitmaps_image = new ArrayList<Bitmap>();




    public Exercises_for_muscle_groupsFragment() {
        // Required empty public constructor
    }


    /**
     * Create a new instance of DetailsFragment, initialized to
     * show the text at 'index'.
     */
    public static Exercises_for_muscle_groupsFragment newInstance(int muscle_group, boolean showInput) {
        Exercises_for_muscle_groupsFragment f = new Exercises_for_muscle_groupsFragment();

        // Supply index input as an argument.
        Bundle args = new Bundle();
        args.putInt("muscle_groupID", muscle_group);
        args.putBoolean("showInput", showInput);
        f.setArguments(args);

        return f;
    }


    private AdapterView.OnItemClickListener onClickListItem = (parent, view, position, id) -> {
        TextView textView = view.findViewById(R.id.LIST_BODYPART_ID);
        String exerciseName = exercises_array.get(position);
        Workout_Details_Fragment fragment = Workout_Details_Fragment.newInstance(exerciseName, true);
        FragmentTransaction transaction = getActivity().getSupportFragmentManager().beginTransaction();
        // Replace whatever is in the fragment_container view with this fragment,
        // and add the transaction to the back stack so the user can navigate back
        transaction.replace(R.id.fragment_container, fragment);
        transaction.addToBackStack(null);

        // Commit the transaction
        transaction.commit();

    };


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_exercises_for_muscle_groups, container, false);

//setting up the tool bar to have a back arrow on create and setting the title of the fragment
        toolbar = view.findViewById(R.id.toolbar_exercises);


        //removing the actionbar so that tool bar can show
        Objects.requireNonNull(((AppCompatActivity) Objects.requireNonNull(getActivity())).getSupportActionBar()).hide();
        toolbar.setNavigationIcon(R.drawable.ic_back);
        toolbar.setNavigationOnClickListener(v -> getActivity().onBackPressed());


        prefConFig = new PrefConFig(Objects.requireNonNull(getContext()));
        apiInterface = ApiClient.getApiClient().create(ApiInterface.class);

        //getting the extras sent over when item was clicked on the list view
        int extras = getArguments().getInt("muscle_groupID");


        listView = view.findViewById(R.id.exercises_workout_ListView);

        exercise_Image.add(R.drawable.chest);
        Exercises_LVAdapter adapter = new Exercises_LVAdapter(getActivity(), exercises_array, exercise_Image, image_url);
        //setting the adaptor for the list view
        listView.setAdapter(adapter);
        listView.setOnItemClickListener(onClickListItem);





        switch (extras) {
            case 0:

                toolbar.setTitle(R.string.triceps);
                Call<Exercises_response> exercisesTriceps = apiInterface.findExercises(BodyPart.TRICEPS);

                exercisesTriceps.enqueue(new Callback<Exercises_response>() {
                    @Override
                    public void onResponse(Call<Exercises_response> call, Response<Exercises_response> response) {

//                        exercises_array=new String[response.body().getExercisesArray().size()];

                        for (int i = 0; i < response.body().getExercisesArray().size(); i++) {

                            exercises_array.add(i, response.body().getExercisesArray().get(i).getName());
                            image_url.add(i, response.body().getExercisesArray().get(i).getImage());
//                            exercises_array[i]=
                            adapter.notifyDataSetChanged();

                        }
                    }

                    @Override
                    public void onFailure(Call<Exercises_response> call, Throwable t) {

                    }
                });


                break;
            case 1:
                toolbar.setTitle(R.string.pectoraux);
                Call<Exercises_response> exercisesChest = apiInterface.findExercises(BodyPart.PECTORAUX);

                exercisesChest.enqueue(new Callback<Exercises_response>() {
                    @Override
                    public void onResponse(Call<Exercises_response> call, Response<Exercises_response> response) {

//                        exercises_array=new String[response.body().getExercisesArray().size()];

                        for (int i = 0; i < response.body().getExercisesArray().size(); i++) {

                            exercises_array.add(i, response.body().getExercisesArray().get(i).getName());
//                            exercises_array[i]=
                            adapter.notifyDataSetChanged();

                        }
                    }

                    @Override
                    public void onFailure(Call<Exercises_response> call, Throwable t) {

                    }
                });
                break;
            case 2:
                toolbar.setTitle(R.string.deltoids);
                Call<Exercises_response> exercisesDeltoids = apiInterface.findExercises(BodyPart.DELTOIDS);

                exercisesDeltoids.enqueue(new Callback<Exercises_response>() {
                    @Override
                    public void onResponse(Call<Exercises_response> call, Response<Exercises_response> response) {

//                        exercises_array=new String[response.body().getExercisesArray().size()];

                        for (int i = 0; i < response.body().getExercisesArray().size(); i++) {

                            exercises_array.add(i, response.body().getExercisesArray().get(i).getName());
//                            exercises_array[i]=
                            adapter.notifyDataSetChanged();

                        }
                    }

                    @Override
                    public void onFailure(Call<Exercises_response> call, Throwable t) {

                    }
                });
                break;
            case 3:
                toolbar.setTitle(R.string.biceps);
                Call<Exercises_response> exercisesBiceps = apiInterface.findExercises(BodyPart.BICEPS);

                exercisesBiceps.enqueue(new Callback<Exercises_response>() {
                    @Override
                    public void onResponse(Call<Exercises_response> call, Response<Exercises_response> response) {

//                        exercises_array=new String[response.body().getExercisesArray().size()];

                        for (int i = 0; i < response.body().getExercisesArray().size(); i++) {

                            exercises_array.add(i, response.body().getExercisesArray().get(i).getName());
                            image_url.add(i, response.body().getExercisesArray().get(i).getImage());
//                            exercises_array[i]=
                            adapter.notifyDataSetChanged();

                        }
                        prefConFig.distplayToast(image_url.get(1));

                    }

                    @Override
                    public void onFailure(Call<Exercises_response> call, Throwable t) {

                    }
                });

//                prefConFig.distplayToast(Integer.toString(exercises_array.size()));
//                prefConFig.distplayToast(image_url.get(0));
                break;
            case 4:
                toolbar.setTitle(R.string.core);
                Call<Exercises_response> exercisesCore = apiInterface.findExercises(BodyPart.ABDOMINAUX);

                exercisesCore.enqueue(new Callback<Exercises_response>() {
                    @Override
                    public void onResponse(Call<Exercises_response> call, Response<Exercises_response> response) {

//                        exercises_array=new String[response.body().getExercisesArray().size()];

                        for (int i = 0; i < response.body().getExercisesArray().size(); i++) {

                            exercises_array.add(i, response.body().getExercisesArray().get(i).getName());
//                            exercises_array[i]=
                            adapter.notifyDataSetChanged();

                        }
                    }

                    @Override
                    public void onFailure(Call<Exercises_response> call, Throwable t) {

                    }
                });

                break;
            case 5:
                toolbar.setTitle(R.string.dorseaux);

                Call<Exercises_response> exercisesBack = apiInterface.findExercises(BodyPart.DORSEAUX);

                exercisesBack.enqueue(new Callback<Exercises_response>() {
                    @Override
                    public void onResponse(Call<Exercises_response> call, Response<Exercises_response> response) {

//                        exercises_array=new String[response.body().getExercisesArray().size()];

                        for (int i = 0; i < response.body().getExercisesArray().size(); i++) {

                            exercises_array.add(i, response.body().getExercisesArray().get(i).getName());
//                            exercises_array[i]=
                            adapter.notifyDataSetChanged();

                        }
                    }

                    @Override
                    public void onFailure(Call<Exercises_response> call, Throwable t) {

                    }
                });
                break;
            case 6:
                toolbar.setTitle(R.string.leg);

                Call<Exercises_response> exercisesLegs = apiInterface.findExercises(BodyPart.QUADRICEPS);

                exercisesLegs.enqueue(new Callback<Exercises_response>() {
                    @Override
                    public void onResponse(Call<Exercises_response> call, Response<Exercises_response> response) {

//                        exercises_array=new String[response.body().getExercisesArray().size()];

                        for (int i = 0; i < response.body().getExercisesArray().size(); i++) {

                            exercises_array.add(i, response.body().getExercisesArray().get(i).getName());
//                            exercises_array[i]=
                            adapter.notifyDataSetChanged();

                        }
                    }

                    @Override
                    public void onFailure(Call<Exercises_response> call, Throwable t) {

                    }
                });


                break;
            case 7:
                toolbar.setTitle(R.string.showAll);
                Call<Exercises_response> exercisesShowAll = apiInterface.findExercises(BodyPart.SHOWALLEXERCIES);

                exercisesShowAll.enqueue(new Callback<Exercises_response>() {
                    @Override
                    public void onResponse(Call<Exercises_response> call, Response<Exercises_response> response) {

//                        exercises_array=new String[response.body().getExercisesArray().size()];

                        for (int i = 0; i < response.body().getExercisesArray().size(); i++) {

                            exercises_array.add(i, response.body().getExercisesArray().get(i).getName());
//                            exercises_array[i]=
                            image_url.add(i, response.body().getExercisesArray().get(i).getImage());
                            adapter.notifyDataSetChanged();

                        }
                    }

                    @Override
                    public void onFailure(Call<Exercises_response> call, Throwable t) {

                    }
                });
                prefConFig.distplayToast(Integer.toString(image_url.size()));
                break;


        }


        //search view
        searchView = view.findViewById(R.id.exercise_search);
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                adapter.getFilter().filter(query);
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {


                if (TextUtils.isEmpty(newText)) {
                    listView.clearTextFilter();
                    adapter.getFilter().filter("");

                } else {
                    adapter.getFilter().filter(newText);
                }
                return false;
            }
        });


        return view;

    }

}
